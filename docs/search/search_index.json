{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web de apuntes de base de datos.","text":""},{"location":"Unidad1/","title":"Unidad 1","text":""},{"location":"Unidad1/#1-necesidad-de-gestionar-datos","title":"1. Necesidad de gestionar datos","text":"<p>En inform\u00e1tica se conoce como dato a cualquier elemento informativo que tenga relevancia para el sistema. Desde el inicio de la inform\u00e1tica se ha reconocido al dato como al elemento fundamental de trabajo en un ordenador. Por ello se han realizado numerosos estudios y aplicaciones para mejorar la gesti\u00f3n de los mismos empleando sistemas inform\u00e1ticos.</p> <p>Inicialmente los datos que se necesitaba almacenar y gestionar eran pocos, pero poco a poco han ido creciendo. En la actualidad, las numerosas aplicaciones de Internet han producido enormes sistemas de informaci\u00f3n que incluso para poder gestionarlos requieren de gran n\u00famero de m\u00e1quinas haciendo la informaci\u00f3n accesible desde cualquier parte del planeta y de manera instant\u00e1nea.</p> <p>La escritura fue la herramienta que permiti\u00f3 al ser humano poder gestionar conjuntos de datos cada vez m\u00e1s grandes. Adem\u00e1s de permitir compartir esa informaci\u00f3n entre diferentes personas, tambi\u00e9n posibilit\u00f3 que esos datos se guardaran de manera continua e incluso estuvieran disponibles para las siguientes generaciones.</p> <p>Para poder almacenar datos y cada vez m\u00e1s datos, el ser humano ide\u00f3 nuevas herramientas archivos, cajones, carpetas y fichas en las que se almacenaban los datos.</p> <p>La inform\u00e1tica adapt\u00f3 sus herramientas para que los elementos que el usuario maneja en el ordenador se parezcan a los que utilizaba manualmente. As\u00ed en inform\u00e1tica se sigue hablado de ficheros, formularios, carpetas, directorios,...</p>"},{"location":"Unidad1/#2-sistemas-basados-en-archivos","title":"2. Sistemas basados en archivos","text":"<p>En el \u00e1mbito de la inform\u00e1tica, para almacenar informaci\u00f3n se utiliza un elemento clave llamado archivo o fichero. B\u00e1sicamente est\u00e1n formados por una secuencia de d\u00edgitos binarios que, siguiendo una estructura l\u00f3gica determinada, almacenan una informaci\u00f3n concreta, como por ejemplo, un informe, una imagen, una canci\u00f3n, etc. Suponen una manera de almacenar informaci\u00f3n en elementos de almacenamiento permanente, lo que se conoce como memoria secundaria.</p> <p>Antes de que surgieran los sistemas gestores de bases de datos, que veremos en los apartados siguientes, la informaci\u00f3n se gestionaba utilizando sistemas de archivos donde cada aplicaci\u00f3n:</p> <ul> <li>Ten\u00eda un conjunto de archivos de datos y un conjunto de programas que los gestionaban.</li> <li>Gestionaba sus propios archivos de datos.</li> </ul> <p>Este m\u00e9todo de gesti\u00f3n de datos presentaba muchos inconvenientes:</p> <ul> <li>Redundancia de los datos: se produce porque los archivos son creados por distintos programas y van cambiando a lo largo del tiempo pudiendo duplicarse los datos.</li> <li>Dependencia de los datos f\u00edsica-l\u00f3gica: la estructura f\u00edsica de los datos se encuentra codificada en los programas de aplicaci\u00f3n. Cualquier cambio en esa estructura implica al programador identificar, modificar y probar todos los programas que manipulan esos archivos.</li> <li>Separaci\u00f3n y aislamiento de los datos: al estar repartidos en varios archivos, y tener diferentes formatos, es dif\u00edcil escribir nuevos programas que aseguren la manipulaci\u00f3n de los datos correctos.</li> <li>Dificultad para el acceso concurrente: en un sistema de gesti\u00f3n de archivos es complicado que los usuarios actualicen los datos simult\u00e1neamente. Las actualizaciones concurrentes pueden dar por resultado datos inconsistentes.</li> <li>Problemas en la seguridad de los datos: resulta dif\u00edcil implantar restricciones de seguridad pues las aplicaciones se van a\u00f1adiendo al sistema seg\u00fan se van necesitando.</li> <li>Problemas de integridad de datos: los valores almacenados en los archivos deben cumplir con restricciones de consistencia. Por ejemplo, no se puede insertar una nota de un alumno en una asignatura si previamente esa asignatura no est\u00e1 creada. Esto implica a\u00f1adir gran n\u00famero de l\u00edneas de c\u00f3digo en los programas.</li> </ul>"},{"location":"Unidad1/#3-sistemas-de-gestion-de-bases-de-datos","title":"3. Sistemas de gesti\u00f3n de bases de datos","text":"<p>Para resolver los inconvenientes de emplear sistemas de archivos en la gesti\u00f3n de datos surgieron los llamados sistemas de gesti\u00f3n de bases de datos (SGBD) formados por:</p> <ul> <li>Base de datos \u2192 Colecci\u00f3n de datos.</li> <li>Sistema de gesti\u00f3n \u2192 Conjunto de programas para almacenar y recuperar los datos.</li> </ul> <p>En estos sistemas se proporciona un conjunto coordinado de programas, procedimientos y lenguajes que permiten a los distintos usuarios realizar sus tareas habituales con los datos, garantizando su seguridad e integridad. Es habitual referirse a ellos con las siglas en ingl\u00e9s DBMS (Database Management system).</p>"},{"location":"Unidad1/#31-funciones","title":"3.1. Funciones","text":"<p>El \u00e9xito del SGBD reside en mantener la seguridad e integridad de los datos, para ello ofrecer\u00e1 una serie de herramientas que permitan:</p> <ul> <li>Crear la estructura de los datos y de la propia base de datos.</li> <li>Crear y administrar la estructura f\u00edsica en las unidades de almacenamiento.</li> <li>Manipular los datos permitiendo a\u00f1adir, borrar, modificar o consultar.</li> <li>Crear copias de seguridad y permitir su recuperaci\u00f3n.</li> <li>Gestionar la comunicaci\u00f3n con la base de datos.</li> <li>Instalar la base de datos.</li> <li>Exportar e importar datos.</li> </ul>"},{"location":"Unidad1/#32-modelo-ansix3sparc","title":"3.2. Modelo ANSI/X3/SPARC","text":"<p>En 1975, el organismo ANSI-SPARC (American National Standards Institute \u2013 Standards Planning And Requirements Committee) cre\u00f3 un dise\u00f1o abstracto para estandarizar la manera en que los SGBD administraban las bases de datos.</p> <p>Este dise\u00f1o constaba de una arquitectura de tres niveles: externo, conceptual e interno. Con esto se consegu\u00eda separar la visi\u00f3n que los usuarios ten\u00edan de la base de datos con los detalles internos de su estructura y toda su complejidad. Esta arquitectura es la que la mayor\u00eda de los SGBD emplean:</p> <ul> <li>Nivel externo o de visi\u00f3n: enfocado al usuario de la base de datos. Se muestra al usuario la informaci\u00f3n que le es pertinente y en el formato adecuado. En este nivel se oculta al usuario la informaci\u00f3n que no tiene permitido ver.</li> <li>Nivel conceptual: nivel que determina la organizaci\u00f3n de los datos en la base de datos. Est\u00e1 determinado la informaci\u00f3n que se almacena y qu\u00e9 relaciones e interrelaciones existen entre los mismos datos. El administrador de la bases de datos deber\u00eda ser el \u00fanico usuario con acceso.</li> <li>Nivel interno o f\u00edsico: determina c\u00f3mo est\u00e1n almacenados los datos f\u00edsicamente en el sistema inform\u00e1tico. Concreta los detalles de almacenamiento de cada conjunto de datos, tales como el tipo de dato para cierto campo, el m\u00e9todo de acceso a una tabla, etc.</li> </ul> <p>En definitiva, este modelo es una propuesta te\u00f3rica sobre c\u00f3mo debe funcionar un SGBD con la arquitectura siguiente:</p> <p></p>"},{"location":"Unidad1/#33-tipos","title":"3.3. Tipos","text":"<p>En base al modo de describir los datos internamente en una base de datos junto con sus relaciones, restricciones, etc. se establecen diferentes tipos de SGBD. Los que nos encontramos actualmente ser\u00edan:</p> <ul> <li> <p>Relacionales: se utiliza un grupo de tablas para representar los datos y las relaciones entre ellos. Cada tabla est\u00e1 formada por varias columnas que representan propiedades de las filas. Cada fila se identifica, por una clave primaria o identificador. Permite combinar diferentes tablas para formar otras nuevas. Se trata del modelo de datos m\u00e1s usado actualmente.</p> </li> <li> <p>Orientadas a objetos: buscan adaptar las bases de datos a la programaci\u00f3n orientada a objetos. Se intenta solventar las limitaciones de los SGBD relacionales, como puede ser el problema de la herencia o los tipos definidos por el usuario.</p> </li> <li> <p>Relacionales orientados a objetos: tratan de ser un h\u00edbrido entre el modelo relacional y el orientado a objetos. Se intenta conseguir una compatibilidad relacional, dando la posibilidad de integrar mejoras de la orientaci\u00f3n a objetos. Las \u00faltimas versiones de las actuales bases de datos como Oracle, Microsoft SQL Server y PostgreSQL se pueden considerar de este tipo, llamado ORDBMS.</p> </li> </ul> <p>Los \u00faltimos a\u00f1os han aparecido las llamadas bases de datos NoSQL orientadas principalmente al mundo del Big Data. Se tratar\u00e1n en un apartado posterior.</p>"},{"location":"Unidad1/#34-componentes","title":"3.4. Componentes","text":"<p>De modo general encontramos en los SGBD los siguientes componentes:</p> <ul> <li> <p>Lenguajes de la base de datos: cualquier SGBD ofrece la posibilidad de utilizar lenguajes que permitan especificar los datos que componen la BD, su estructura, relaciones, reglas de integridad, control de acceso, caracter\u00edsticas f\u00edsicas y vistas externas de los usuarios. Esos lenguajes ser\u00edan: Lenguaje de Definici\u00f3n de Datos (DDL), Lenguaje de Manejo de Datos (DML) y Lenguaje de Control de Datos (DCL).</p> </li> <li> <p>Diccionario de datos: lugar donde se deposita la informaci\u00f3n sobre la totalidad de los datos que forman la base de datos. Contiene las caracter\u00edsticas l\u00f3gicas de las estructuras que almacenan los datos, su nombre, descripci\u00f3n, contenido y organizaci\u00f3n.</p> </li> <li> <p>Gestor de la base de datos: parte software encargada de garantizar el correcto, seguro, \u00edntegro y eficiente acceso y almacenamiento de los datos. Proporciona una interfaz entre los datos almacenados y los programas de aplicaci\u00f3n que los manejan. Es un intermediario entre el usuario y los datos.</p> </li> <li> <p>Usuarios: en los SGBD existen diferentes perfiles de usuario, cada uno de ellos con un permisos concreto. Generalmente distinguiremos entre el administrador de la base de datos (DBA) y el resto de usuarios, donde encontramos a programadores, analistas, usuarios finales, etc.</p> </li> <li> <p>Herramientas de la base de datos: aplicaciones que permiten a los administradores la gesti\u00f3n de la base de datos, de los usuarios y permisos, generadores de formularios, informes, etc.</p> </li> </ul>"},{"location":"Unidad1/#35-sgbd-mas-extendidos","title":"3.5. SGBD m\u00e1s extendidos","text":"<p>Actualmente existen diferentes SGBD disponibles. Seg\u00fan el r\u00e1nking establecido en la p\u00e1gina web DB-Engines, los m\u00e1s empleados actualmente ser\u00edan, en ese orden:</p> <ol> <li>Oracle: empleado principalmente en las bases de datos empresariales, se caracteriza por su alto rendimiento, escalabilidad y seguridad.</li> <li>MySQL: es el m\u00e1s popular en la web, utilizado principalmente con el lenguaje de programaci\u00f3n PHP.</li> <li>Microsoft SQL Server: compite con Oracle dentro del entorno empresarial.</li> <li>PostgreSQL: destaca su alto nivel de concurrencia y soporte para m\u00faltiples tipos de datos.</li> <li>MongoDB: SGBD NoSQL m\u00e1s popular ofrece una alta disponibilidad y balanceo de carga.</li> </ol>"},{"location":"Unidad1/#4-bases-de-datos-nosql","title":"4. Bases de datos NoSQL","text":"<p>NoSQL (Not Only SQL) es un t\u00e9rmino que engloba a una gran variedad de SGDB que almacenan los datos siguiendo diferentes formatos y estructuras, a diferencia de los SGBD del tipo relacional (los m\u00e1s usados hist\u00f3ricamente) que organizan la informaci\u00f3n en estructuras concretas como son las tablas, filas y columnas.</p> <p>Los SGBD NoSQL usan estructuras clave-valor, grafos, \u2026 y tampoco soportan el uso del lenguaje SQL, un est\u00e1ndar en el acceso y manipulaci\u00f3n de informaci\u00f3n contenida en las bases de datos.</p> <p>Las principales ventajas que ofrecen ser\u00edan su escalabilidad y altas prestaciones con vol\u00famenes grandes de datos. Sin embargo, y esa es la gran desventaja, adolecen de la llamada propiedad ACID (Atomicity, Consistency, Isolation, Durability) propia de los SGBD relaciones, los SQL. Esto puede provocar problemas de redundancia y fragmentaci\u00f3n de datos.</p> <p></p> <p>Como norma, un SGBD NoSQL ser\u00eda aconsejable cuando:</p> <ul> <li>El volumen de datos operacional es muy grande</li> <li>La escritura/lectura se realiza de modo masivo</li> <li>Se necesita un tiempo de respuesta r\u00e1pido</li> <li>La informaci\u00f3n no es apta para ser consultada con lenguaje SQL</li> <li>Trabajaremos con tipos de datos flexibles y diversos</li> </ul> <p>Algunas de los SGBD NoSQL actuales ser\u00edan:</p> <ul> <li>MongoDB</li> <li>Cassandra</li> <li>Elasticsearch</li> <li>Redis</li> </ul>"},{"location":"Unidad1/#5-diseno-de-bases-de-datos","title":"5. Dise\u00f1o de bases de datos","text":"<p>Implementar el dise\u00f1o de una base de datos consiste en definir su estructura de datos en un sistema de informaci\u00f3n determinado partiendo de una toma de requerimientos y an\u00e1lisis del sistema que se quiere modelizar.</p> <p>La fase de an\u00e1lisis y recolecci\u00f3n de requerimientos inicial producir\u00e1:</p> <ul> <li>Requisitos de datos: se utilizan como una fuente para el dise\u00f1o de la base de datos y se deben especificarse en la forma m\u00e1s detallada y completa posible.</li> <li>Requisitos funcionales: utilizados como fuente para el dise\u00f1o de la aplicaci\u00f3n  final.</li> </ul> <p>La fase de dise\u00f1o de una base de datos deber\u00eda englobar tres etapas:</p> <ul> <li>Dise\u00f1o conceptual: crearemos una estructura de la informaci\u00f3n independiente de la tecnolog\u00eda a emplear. Su resultado es el llamado esquema conceptual. Este esquema constituye una descripci\u00f3n de alto nivel de la estructura de la base de datos independiente del SGBD final.</li> <li>Dise\u00f1o l\u00f3gico: partiremos del resultado del dise\u00f1o conceptual, transform\u00e1ndolo y adapt\u00e1ndolo al modelo de SGBD que utilizaremos (relacional, orientado a objetos, etc.).</li> <li>Dise\u00f1o f\u00edsico: se transforma la estructura obtenida en el dise\u00f1o l\u00f3gico acorde al SGBD final y hardware donde se implementar\u00e1 la base de datos con el objetivo de conseguir una mayor eficiencia. Cada SGBD ha desarrollado un lenguaje propio para implementar el dise\u00f1o f\u00edsico de la base de datos con el fin de obtener el m\u00e1ximo rendimiento del hardware y del sistema operativo.</li> </ul> <p></p> <p>El dise\u00f1o de una base de datos tiene gran importancia con el fin de evitar:</p> <ul> <li>Redundancia: repetir datos de forma innecesaria, malgastando espacio de almacenamiento y provocando inconsistencias.</li> <li>Imposibilidad de representar informaci\u00f3n: determinados aspectos de la organizaci\u00f3n pueden resultar imposibles o muy dif\u00edciles de modelizar.</li> </ul>"},{"location":"about/","title":"Sobre m\u00ed","text":"<p>Soy Alfonso Serrano Albert , profesor de inform\u00e1tica de ciclos. Es la primera vez que trabajo con Markdown y me gustar\u00eda poco a poco migrar mis apuntes a este lenguaje.</p>"}]}